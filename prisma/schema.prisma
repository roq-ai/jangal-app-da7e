generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model account {
  id                                                                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                                                               DateTime              @default(now()) @db.Timestamp(6)
  updated_at                                                               DateTime              @default(now()) @db.Timestamp(6)
  bank_name                                                                String?               @db.Uuid
  roq_user_id                                                              String?               @db.Uuid
  account_number                                                           String?               @db.VarChar(255)
  account_balance                                                          Float
  account_type                                                             String?               @db.VarChar(255)
  bank                                                                     bank?                 @relation(fields: [bank_name], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                                                                     user?                 @relation(fields: [roq_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  transaction_history_transaction_history_reciever_account_numberToaccount transaction_history[] @relation("transaction_history_reciever_account_numberToaccount")
  transaction_history_transaction_history_sender_account_numberToaccount   transaction_history[] @relation("transaction_history_sender_account_numberToaccount")
}

model bank {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  accounts    Int?
  users       Int?
  account     account[]
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model transaction_history {
  id                                                           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at                                                   DateTime @default(now()) @db.Timestamp(6)
  updated_at                                                   DateTime @default(now()) @db.Timestamp(6)
  sender_account_number                                        String?  @db.Uuid
  reciever_account_number                                      String?  @db.Uuid
  transaction_amount                                           Float
  transaction_status                                           String   @db.VarChar(255)
  account_transaction_history_reciever_account_numberToaccount account? @relation("transaction_history_reciever_account_numberToaccount", fields: [reciever_account_number], references: [id], onDelete: NoAction, onUpdate: NoAction)
  account_transaction_history_sender_account_numberToaccount   account? @relation("transaction_history_sender_account_numberToaccount", fields: [sender_account_number], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  account     account[]
  bank        bank[]
}
